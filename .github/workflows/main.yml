name: Streamlined-DevSecOps-Pipeline

on:
  push:
    branches:
      - devsecops-pipeline # Trigger the workflow on pushes to the 'devsecops-pipeline' branch

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: checkout source code
        run: |
          echo "Checkout of code is done"
          git clone https://github.com/juice-shop/juice-shop.git # Clone the Juice Shop repository
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: source-code
          path: . # Upload the entire source code as an artifact

  build:
    runs-on: ubuntu-latest
    needs: [checkout] # This job depends on the 'checkout' job
    steps:
      - name: Build
        uses: actions/download-artifact@v2
        with:
          name: source-code # Download the 'source-code' artifact from the previous job
      - name: Build with Artifacts
        run: |
          echo "Code build is done"
          cd juice-shop # Change directory to the cloned repository
          npm install # Install the necessary Node.js dependencies

  sast:
    needs: [checkout, build] # This job depends on the 'checkout' and 'build' jobs
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: source-code # Download the 'source-code' artifact
      - name: SAST Security Test
        run: |
          echo "run SAST security checks"
          cd juice-shop # Change directory to the cloned repository
          docker run -t --name sast -v ./:/path checkmarx/kics:latest scan -p /path -o "/path/" || true
          # Run static application security testing (SAST) using KICS in a Docker container
          # The '|| true' ensures the pipeline doesn't fail on errors (for demo purposes)

  sca:
    runs-on: ubuntu-latest
    needs: [checkout, build] # This job depends on the 'checkout' and 'build' jobs
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: source-code # Download the 'source-code' artifact
      - name: SCA Security Test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Use the Snyk token from GitHub Secrets
        run: |
          echo "run SCA security checks"
          cd juice-shop # Change directory to the cloned repository
          npm install # Install the necessary Node.js dependencies
          docker run --name sca -e SNYK_TOKEN=$SNYK_TOKEN -v ./:/app snyk/snyk:node || true
          # Run software composition analysis (SCA) using Snyk in a Docker container
          # The '|| true' ensures the pipeline doesn't fail on errors (for demo purposes)

  containerscan:
    runs-on: ubuntu-latest
    needs: [checkout, build] # This job depends on the 'checkout' and 'build' jobs
    steps:
      - name: Container Security Scanning
        run: |
          echo "Security Testing Container"
          docker pull bkimminich/juice-shop # Pull the Juice Shop Docker image
          docker run --name containersecurity -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image bkimminich/juice-shop || true
          # Run container security scanning using Trivy on the Juice Shop Docker image
          # The '|| true' ensures the pipeline doesn't fail on errors (for demo purposes)

  dast:
    runs-on: ubuntu-latest
    needs: [checkout, build] # This job depends on the 'checkout' and 'build' jobs
    steps:
      - name: Vulnerability Scanning
        run: |
          echo "DAST Security Testing"
          docker run -d -p 3000:3000 --name juiceshop bkimminich/juice-shop # Run the Juice Shop Docker container
          juiceip=$(docker inspect -f "{{.NetworkSettings.Networks.bridge.IPAddress }}" juiceshop) # Get the container IP address
          docker run -t --name dast ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://$juiceip:3000 || true
          # Run dynamic application security testing (DAST) using OWASP ZAP in a Docker container
          docker logs dast &> dast.log # Save the logs to dast.log
          # The '|| true' ensures the pipeline doesn't fail on errors (for demo purposes)

  deploy:
    runs-on: ubuntu-latest
    needs: [checkout, build, containerscan, sca, sast, dast] # This job depends on all the previous jobs
    steps:
     - name: application deploymnent
       run: |
         echo "Deployment Completed"
         java -version # Print the Java version (placeholder for actual deployment steps)
         python --version # Print the Python version (placeholder for actual deployment steps)
